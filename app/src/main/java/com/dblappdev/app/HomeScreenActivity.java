package com.dblappdev.app;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Toast;

import com.android.volley.VolleyError;
import com.dblappdev.app.adapters.ExpenseGroupAdapter;
import com.dblappdev.app.api.APIResponse;
import com.dblappdev.app.api.APIService;
import com.dblappdev.app.dataClasses.ExpenseGroup;
import com.dblappdev.app.dataClasses.LoggedInUser;
import com.dblappdev.app.dataClasses.User;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class HomeScreenActivity extends AppCompatActivity {

    boolean isRequestHappening = false;

    // List containing the expense groups to be shown
    private ArrayList<ExpenseGroup> expenseGroups = new ArrayList<>();
    // Map with a balance

    /**
     * This method gets invoked by Android upon the creation of a HomeScreenActivity
     * Firstly, this method should check whether the logged in instance in
     * {@link LoggedInUser} is not null.
     * If this is null, throw a RuntimeException stating that something went wrong with logging in.
     * Otherwise, this method should obtain all the ExpenseGroups that the currently
     * logged in user is a part of, as well as the balance of the logged in user in all those groups.
     * Once these have been loaded, a recyclerview adapter for the ExpenseGroups should be
     * initiated with the retrieved ExpenseGroups as dataset.
     * @pre {@code {@link LoggedInUser#getInstance()} != null}
     * @throws RuntimeException if {@code {@link LoggedInUser#getInstance()} == null}
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // Standard code generated by Android Studio
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_home_screen);

        // Check if the Singleton class LoggedInUser is initialized
        if (LoggedInUser.getInstance() == null) {
            throw new RuntimeException("Something went wrong with logging in: no loggged in user" +
                    " found upon creation of the home screen!");
        }

        // First get all the expense groups the logged in user is part of
        if (!isRequestHappening) {
            getExpenseGroups(this);
        }
    }

    /**
     * This method gets called when the user presses the account button on the home screen.
     * When the user does so, a new EditProfile activity should be created and started.
     * The current activity should not be closed, such that the user gets redirected to this screen
     * when they perform a backPress action in the newly created EditProfile activity.
     * Event handler for the account button
     * @param view The View instance of the button that was pressed
     */
    public void onAccount(View view) {
        // Redirect to the edit profile screen
        Intent editProfileIntent = new Intent(this, EditProfileActivity.class);
        startActivity(editProfileIntent);
    }

    /**
     * This method gets called when the user presses the add button on the home screen.
     * When the user does so, a new AddJoinGroup activity should be created and started.
     * The current activity should not be closed, such that the user gets redirected to this screen
     * when they perform a backPress action in the newly created AddJoinGroup activity.
     * Event handler for the add button
     * @param view The View instance of the button that was pressed
     */
    public void onAdd(View view) {
        // Redirect to add/join group screen
        Intent addJoinGroupScreenIntent = new Intent(this, AddJoinGroupActivity.class);
        startActivity(addJoinGroupScreenIntent);
    }

    /**
     * This method gets called when the user presses the logout button on the home screen.
     * When the user does so, this method should logout the user from the {@link LoggedInUser}
     * singleton class by calling {@code {@link LoggedInUser#logOut()}}.
     * After this, a new Login activity should be created and started.
     * Lastly, this current activity should be finished, to prevent the user from being able to
     * go back without logging in.
     * Event handler for the logout button
     * @param view The View instance of the button that was pressed
     */
    public void onLogout(View view) {
        // Clear the current instance of the LoggedInUser singleton
        LoggedInUser.logOut();
        // Redirect to the login screen
        Intent loginScreenIntent = new Intent(this, LoginActivity.class);
        startActivity(loginScreenIntent);
        // Make sure the user can't go back to the home screen by finishing this activity
        finish();
    }

    /**
     * This method gets called when the user presses an entry in the ExpenseGroup recyclerview.
     * When the user does so, this method should create and start a new GroupScreen activity,
     * linking the ExpenseGroup that belongs to the clicked entry.
     * After this, this activity should not be closed, such that the user gets redirected to this
     * screen when they go back from the GroupScreen activity.
     * Event handler for the group list items
     * @param view The View instance of the group entry that was pressed in the list
     */
    public void onItemClick(View view) {
        // Redirect to group screen
        Intent groupScreenIntent = new Intent(this, GroupScreenActivity.class);
        // Link the ExpenseGroup by adding the group ID as extra on the intent
        groupScreenIntent.putExtra("EXPENSE_GROUP_ID", (Integer) view.getTag());
        startActivity(groupScreenIntent);
    }

    /**
     * This method creates a getExpenseGroups API call to retrieve all the expenses the currently
     * logged in user is part of.
     */
    private void getExpenseGroups(Context context) {
        APIService.getExpenseGroups(LoggedInUser.getInstance().getApiKey(), context,
                new APIResponse<List<Map<String, String>>>() {
                    @Override
                    public void onResponse(List<Map<String, String>> data) {
                        for (Map<String, String> group : data) {
                            int id = Integer.parseInt(group.get("id"));
                            String title = group.get("name");
                            User moderator = new User(group.get("moderator_id"));
                            ExpenseGroup expenseGroup = new ExpenseGroup(id, title, moderator);
                            expenseGroups.add(expenseGroup);
                        }
                        // Set the recyclerview and its settings
                        RecyclerView recView = (RecyclerView) findViewById(R.id.recyclerViewExpenseGroup);
                        View.OnClickListener listener = view -> onItemClick(view);
                        ExpenseGroupAdapter adapter = new ExpenseGroupAdapter(listener, expenseGroups);
                        recView.setAdapter(adapter);
                        recView.setLayoutManager(new LinearLayoutManager(context));
                        isRequestHappening = false;
                    }

                    @Override
                    public void onErrorResponse(VolleyError error, String errorMessage) {
                        // TODO: make this into generic function
                        showErrorToast(errorMessage);
                        isRequestHappening = false;
                    }
                });
    }

    /**
     * TODO: Make general method
     * Shows a toast containing the provided error message
     * @param errorMessage String to be displayed in the toast message
     */
    private void showErrorToast(String errorMessage) {
        Context context = getApplicationContext();
        int duration = Toast.LENGTH_SHORT;
        Toast toast = Toast.makeText(context, errorMessage, duration);
        toast.show();
    }

}