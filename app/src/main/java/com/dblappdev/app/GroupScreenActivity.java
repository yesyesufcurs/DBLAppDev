package com.dblappdev.app;

import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;

import com.dblappdev.app.adapters.ExpenseAdapter;
import com.dblappdev.app.adapters.ExpenseGroupAdapter;
import com.dblappdev.app.dataClasses.LoggedInUser;

public class GroupScreenActivity extends AppCompatActivity {


    /**
     * This method gets invoked by Android upon the creation of a GroupScreenActivity
     * Firstly, this method should check whether the logged in instance in
     * {@link LoggedInUser} is not null.
     * If this is null, throw a RuntimeException stating that something went wrong with logging in.
     * Otherwise, this method should obtain all the Expenses that are in the group the user is
     * currently looking at.
     * Once these have been loaded, a recyclerview adapter for the Expenses should be
     * initiated with the retrieved Expenses as dataset.
     * @pre {@code {@link LoggedInUser#getInstance()} != null}
     * @throws RuntimeException if {@code {@link LoggedInUser#getInstance()} == null}
     */

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        // Standard code generated by Android Studio
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_group_screen);

        // Check if the Singleton class LoggedInUser is initialized
        if (LoggedInUser.getInstance() == null) {
            throw new RuntimeException("Something went wrong with logging in: no loggged in user" +
                    " found upon creation of the home screen!");
        }

        // Set the recyclerview and its settings
        RecyclerView recView = (RecyclerView) findViewById(R.id.recyclerViewExpense);
        View.OnClickListener listener = view -> onItemClick(view);
        ExpenseAdapter adapter = new ExpenseAdapter(listener);
        recView.setAdapter(adapter);
        recView.setLayoutManager(new LinearLayoutManager(this));
    }

    /**
     * This method gets called when the user presses the settings button on the home screen.
     * When the user does so, a new GroupSettings activity should be created and started.
     * The current activity should not be closed, such that the user gets redirected to this screen
     * when they perform a backPress action in the newly created GroupSettings activity.
     * Event handler for the settings button
     * @param view The View instance of the button that was pressed
     */
    public void onSettings(View view) {
        // Redirect to the settings screen
        Intent groupSettingsIntent = new Intent(this, GroupSettingsActivity.class);
        startActivity(groupSettingsIntent);
    }

    /**
     * This method gets called when the user presses the add button on the group screen.
     * When the user does so, a new AddExpense activity should be created and started.
     * The current activity should not be closed, such that the user gets redirected to this screen
     * when they perform a backPress action in the newly created AddExpense activity.
     * Event handler for the add button
     * @param view The View instance of the button that was pressed
     */
    public void onAdd(View view) {

        // Redirect to the expense details screen
        Intent expenseDetailsIntent = new Intent(this, ExpenseDetailsActivity.class);
        startActivity(expenseDetailsIntent);
    }

    /**
     * This method gets called when the user presses an entry in the Expenses recyclerview.
     * When the user does so, this method should create and start a new ExpenseDetails activity,
     * linking the Expense that belongs to the clicked expense.
     * After this, this activity should not be closed, such that the user gets redirected to this
     * screen when they go back from the ExpenseDetails activity.
     * Event handler for the expense list items
     * @param view The View instance of the expense entry that was pressed in the list
     */
    public void onItemClick(View view) {

        // Redirect to the expense details screen
        Intent expenseDetailsIntent = new Intent(this, ExpenseDetailsActivity.class);
        startActivity(expenseDetailsIntent);
    }

    /**
     * Event handler for the search button
     * @param view The View instance of the button that was pressed
     */
    public void onSearch(View view) {

    }

    /**
     * This method gets called when the user performs a backPress action.
     * When the user does so, the user will be redirected to the already existing
     * HomeScreenActivity.
     * Event handler for the back button
     * @param view The View instance of the button that was pressed
     */
    public void onBack(View view) {

        // Redirect to the home screen
        finish();
    }
}